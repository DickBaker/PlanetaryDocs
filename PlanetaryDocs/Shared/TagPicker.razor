@if (Tags != null && Tags.Count > 0)
{
    foreach (var tag in Tags)
    {
        <span>
            "@tag" [<a href="#"
                       title="Remove"
                       @onclick="async () => await RemoveAsync(tag)"
                       @onclick:preventDefault>x</a>]
            &nbsp;
        </span>
    }
}
@if (pickNew)
{
    <TagSearch Tag="@NewTag" />
}
else
{
    <a href="#"
       @onclick="() => pickNew = true"
       @onclick:preventDefault>Pick Existing</a>
}
&nbsp;
<input type="text" placeholder="Enter new tag"
       @bind-value="addTag"
       @bind-value:event="oninput" />[
@if (string.IsNullOrWhiteSpace(addTag))
{
    <span>&nbsp;</span>
}
else
{
    <a href="#"
       title="Add Tag"
       @onclick="() => NewTag = addTag"
       @onclick:preventDefault>+</a>
}]
@code {
    bool pickNew = false;
    private string newTag = string.Empty;
    private string addTag = string.Empty;

    [Parameter]
    public List<string> Tags { get; set; }

    [Parameter]
    public EventCallback<List<string>> TagsChanged { get; set; }

    public string NewTag
    {
        get => newTag;
        set
        {
            if (!string.IsNullOrWhiteSpace(value) &&
                !Tags.Contains(value))
            {
                Tags.Add(value);
                newTag = string.Empty;
                addTag = string.Empty;
                pickNew = false;
                InvokeAsync(async () => await TagsChanged.InvokeAsync(
                    Tags.ToList()));
            }
        }
    }

    public async Task RemoveAsync(string tag)
    {
        Tags.Remove(tag);
        await TagsChanged.InvokeAsync(Tags.ToList());
    }
}