@page "/View/{Uid}"

@using System.Net;

@inject IDocumentService DocumentService
@inject LoadingService LoadingService
@inject NavigationManager NavigationService
@inject TitleService TitleService  

<div class="container">
    <div class="row">
        <div class="col-12">
            <LoadingIndicator />
        </div>
    </div>
    @if (notFound)
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-danger">
                    ⚠ Document with id '@_uid' was not found.
                    <a href="/">Click here</a> to return to search.
                </div>
            </div>
        </div>
    }
    @if (!loading && document != null)
    {
        <div class="row">
            @if (audit)
            {
            <div class="col-12">
                <h2>@title</h2>
            </div>
            }
            else
            {
                <div class="col-2">
                    <a href="/Edit/@WebUtility.UrlEncode(Uid)"
                       title="Edit">📝 Edit</a>
                </div>
                <div class="col-10">
                    <h2>@title</h2>
                </div>
            }
        </div>
        @if (audit)
        {
            <div class="row">
                <div class="col-12">
                    <div class="alert alert-info">
                        You are viewing an archived version of this document.
                        <button class="btn btn-link" 
                                @onclick="() => BackToMain()">Click here</button>
                        to return to the current version.
                    </div>
                </div>
            </div>
        }
        <div class="row">
            <div class="col-2">
                Author: @document.AuthorAlias
            </div>
            <div class="col-2">
                @if (DateTimeOffset.UtcNow.Ticks >
                 document.PublishDate.Ticks)
                {
                    <span>Published: @document.PublishDate</span>
                }
                else
                {
                    <span>Scheduled: @document.PublishDate</span>
                }
            </div>
            <div class="col-8">
                Tags: @foreach (var tag in document.Tags)
                {
                    <span>'@tag'&nbsp;</span>
                }
            </div>
        </div>
        <div class="row">
            <div class="col-12 text-justify">
                @document.Description
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                @if (!showHistory && !audit)
                {
                    <button class="btn btn-link"
                            @onclick="()=>showHistory=true">
                        Show Audit History
                    </button><span>&nbsp;</span>
                }
                <button class="btn btn-link"
                        @onclick="() => { showMarkdown = !showMarkdown; showHistory = false; }">
                    @toggleText
                </button>
                @if (!showMarkdown)
                {
                    <span>&nbsp;</span>
                    <button class="btn btn-link"
                            @onclick="()=> { previewHtml = !previewHtml; showHistory = false; }">
                        @previewText
                    </button>
                }
            </div>
        </div>
        <div class="row">
                @if (showHistory)
                {
                    <DocHistory Uid="@document.Uid"/>
                }
                else if (showMarkdown)
                {
                    <div class="col-12 code">
                        @document.Markdown
                    </div>
                }
                else if (previewHtml)
                {
                    <div class="col-12 web">
                        <HtmlPreview Html="@document.Html" />
                    </div>
                }
                else
                {
                    <div class="col-12 code">
                        @document.Html
                    </div>
                }                
        </div>
    }
</div>
@code {
    private bool showHistory = false;
    private bool previewHtml = false;
    private bool showMarkdown = true;
    private string _uid = string.Empty;
    private bool loading = true;
    private bool notFound = false;
    private bool audit = false;

    [Parameter]
    public string Uid { get; set; }

    private Document document = null;

    private string toggleText => showMarkdown ?
        "Show HTML" : "Show Markdown";

    private string previewText => previewHtml ?
        "Show Source" : "Show Preview";

    private string title => audit ? $"[ARCHIVE] {document?.Title}"
        : document?.Title;

    protected override async Task OnParametersSetAsync()
    {
        var newUid = WebUtility.UrlDecode(Uid);
        if (newUid != _uid)
        {
            var history = string.Empty;
            if (NavigationService.Uri.IndexOf('?') > 0)
            {
                var parts = NavigationService.Uri.Split('?');
                var keyValues = parts[1].Split('&');
                var historyPair = keyValues.FirstOrDefault(kv =>
                    kv.StartsWith("history="));
                if (!string.IsNullOrWhiteSpace(historyPair))
                {
                    history = historyPair.Split('=')[1];
                }
            }
            loading = false;
            notFound = false;
            _uid = newUid;
            try
            {
                loading = true;
                if (string.IsNullOrWhiteSpace(history))
                {
                    await LoadingService.WrapExecutionAsync(
                        async () => document = await
                            DocumentService.LoadDocumentAsync(_uid));
                    audit = false;
                }
                else
                {
                    await LoadingService.WrapExecutionAsync(
                        async () => document = await
                            DocumentService.LoadDocumentSnapshotAsync(Guid.Parse(history), _uid));
                    audit = true;
                }
                loading = false;
                await TitleService.SetTitleAsync($"Viewing {title}");
            }
            catch
            {
                notFound = true;
            }
        }
        await base.OnParametersSetAsync();
    }

    private void BackToMain()
    {
        NavigationService.NavigateTo(
            $"/View/{WebUtility.UrlEncode(Uid)}", 
            true);
    }
}
