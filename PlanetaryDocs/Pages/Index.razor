@page "/"

@using System.Net;

@inject IDocumentService DocumentService
@inject LoadingService LoadingService
@inject NavigationManager NavigationService

<h1>Planetary Docs <LoadingIndicator /></h1>

<div class="container fixed">
    <div class="row">
        <div class="col">
            <strong>Search Documents:</strong>
        </div>
    </div>
    <div class="row @(loading ? "loading" : string.Empty)">
        <div class="col">
            @if (loading)
            {
                <p>@text</p>
            }
            else
            {
                <input @bind-value="text"
                   @bind-value:event="oninput"
                   @ref="inputElem"
                   autofocus
                   placeholder="Enter search text" />
            }
        </div>
        <div class="col">
            @if (@loading)
            {
                <p><strong>Alias:</strong>&nbsp;@alias</p>
            }
            else
            {
                <AliasSearch @bind-Alias="alias"/>
            }
        </div>
        <div class="col">
            @if (loading)
            {
                <p><strong>Tag:</strong>&nbsp;@tag</p>
            }
            else
            {
            <TagSearch @bind-Tag="tag" />
            }
        </div>
        <div class="col">
            &nbsp;<button class="btn btn-sm btn-success"
                    @onclick="async () => await SearchAsync()"
                    disabled="@loading">
                Search
            </button>
        </div>
    </div>
    <div class="row">
        <div class="container">
            @if (loading)
            {
                <div class="row">
                    <div class="col-12">
                        <div class="alert alert-warning">🔎 Searching...</div>
                    </div>
                </div>
            }
            @if (docsList != null && !loading)
            {
                <div class="row">
                    <div class="col-12">
                        Search criteria: Alias = '@alias', Tag = '@tag', SearchText = '@text''
                    </div>
                    <div class="col-12">
                        <div class="alert alert-info">
                            @if (docsList.Count < 1)
                            {
                                <span>No documents found.</span>
                            }
                            @if (docsList.Count == 1)
                            {
                                <span>One document found.</span>
                            }
                            @if (docsList.Count > 1)
                            {
                                <span>@docsList.Count documents found.</span>
                            }
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-2">
                        &nbsp;
                    </div>
                    <div class="col-4">
                        <b>Alias</b>
                    </div>
                    <div class="col-6">
                        <b>Title</b>
                    </div>
                </div>
                foreach (var doc in docsList)
                {
                    <div class="row result">
                        <div class="col-2">
                            <a title="Edit document" href="/Edit/@(SafeUid(doc.Uid))">
                                📝
                            </a>
                            &nbsp;
                            <a title="View document" href="/View/@(SafeUid(doc.Uid))">
                                👁
                            </a>
                        </div>
                        <div class="col-4 clickable" @onclick="() => Navigate(doc.Uid)">
                            @doc.AuthorAlias
                        </div>
                        <div class="col-6 clickable" @onclick="() => Navigate(doc.Uid)">
                            @doc.Title
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private bool loading = true;
    private bool navigatingToThisPage = true;
    private bool searchQueued = false;
    private string alias = string.Empty;
    private string tag = string.Empty;
    private string text = string.Empty;
    private List<DocumentSummary> docsList = null;
    private ElementReference inputElem;

    protected override void OnAfterRender(bool firstRender)
    {
        var stateHasChanged = false;
        if (navigatingToThisPage)
        {
            loading = false;
            stateHasChanged = true;
        }

        if (navigatingToThisPage && NavigationService.Uri.IndexOf('?') > 0)
        {
            var queryString = NavigationService.Uri.Split('?');
            var keyValuePairs = queryString[1].Split('&');
            foreach (var keyValuePair in keyValuePairs)
            {
                if (keyValuePair.IndexOf('=') > 0)
                {
                    var pair = keyValuePair.Split('=');
                    switch (pair[0])
                    {
                        case nameof(text):
                            text = WebUtility.UrlDecode(pair[1]);
                            break;
                        case nameof(alias):
                            alias = WebUtility.UrlDecode(pair[1]);
                            break;
                        case nameof(tag):
                            tag = WebUtility.UrlDecode(pair[1]);
                            break;
                    }
                }
            }
            navigatingToThisPage = false;
            InvokeAsync(async () => await SearchAsync());
        }
        if (stateHasChanged)
        {
            StateHasChanged();
        }
        base.OnAfterRender(firstRender);
    }

    private async Task SearchAsync()
    {
        if (loading)
        {
            searchQueued = true;
            return;
        }

        searchQueued = false;

        alias = alias.Trim();
        tag = tag.Trim();
        text = text.Trim();

        if (!string.IsNullOrEmpty(alias) ||
            !string.IsNullOrEmpty(tag) ||
            (!string.IsNullOrEmpty(text) && text.Length > 2))
        {
            loading = true;
            do
            {
                searchQueued = false;
                await LoadingService.WrapExecutionAsync(
                    async () =>
                docsList = await DocumentService.QueryDocumentsAsync(
                    text,
                    alias,
                    tag));
            }
            while (searchQueued);
            loading = false;
        }
        else
        {
            docsList = null;
        }

        StateHasChanged();

        var searchParameters = new[]
        {
            ((nameof(text), WebUtility.UrlEncode(text))),
            ((nameof(alias), WebUtility.UrlEncode(alias))),
            ((nameof(tag), WebUtility.UrlEncode(tag)))
        };
        var queryString =
            string.Join('&',
            searchParameters.Select(p => $"{p.Item1}={p.Item2}"));
        navigatingToThisPage = false;
        NavigationService.NavigateTo($"/?{queryString}");
        await inputElem.FocusAsync();
    }

    private string SafeUid(string uid) =>
        WebUtility.UrlEncode(uid);

    private void Navigate(string uid)
    {
        navigatingToThisPage = false;
        NavigationService.NavigateTo($"/View/{SafeUid(uid)}");
    }
}